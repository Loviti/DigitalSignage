services:
  # Node.js Backend Service
  server:
    build:
      context: ./server
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./server:/app
      - server_node_modules:/app/node_modules
      - /app/src/generated/prisma
    environment:
      - NODE_ENV=development
      - BACKEND_VERSION=0.0.1
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/screenlite
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - S3_PORT=9000
      - S3_ACCESS_KEY=screenlite
      - S3_SECRET_KEY=screenlite
      - S3_ENDPOINT=http://minio
      - S3_REGION=us-east-1
      - CORS_ORIGINS=http://localhost:3001,http://screenlite.org
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 5

  # React Frontend Service
  client:
    build:
      context: ./client
      dockerfile: Dockerfile.dev
    ports:
      - "3001:3001"
    volumes:
      - ./client:/app
      - client_node_modules:/app/node_modules
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:3000/api
    depends_on:
      server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: screenlite
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d screenlite" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Service
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # MinIO Service
  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: screenlite
      MINIO_ROOT_PASSWORD: screenlite
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9001/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

volumes:
  server_node_modules:
  client_node_modules:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
