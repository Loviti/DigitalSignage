model Device {
  id             String   @id @default(uuid())
  screenId       String?  @unique
  token          String   @unique
  connectionCode String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  isOnline       Boolean  @default(false)

  screen    Screen?           @relation(fields: [screenId], references: [id], onDelete: SetNull)
  telemetry DeviceTelemetry[]
  statusLog DeviceStatus[]

  @@index([token])
  @@index([connectionCode])
  @@index([screenId])
}

model DeviceStatus {
  id        String   @id @default(uuid())
  deviceId  String
  isOnline  Boolean
  createdAt DateTime @default(now())

  device Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([deviceId])
}

model DeviceTelemetry {
  id                     String   @id @default(uuid())
  deviceId               String
  localIpAddress         String?
  publicIpAddress        String?
  macAddress             String?
  softwareVersion        String?
  platform               String?
  osRelease              String?
  screenResolutionWidth  Int?
  screenResolutionHeight Int?
  hostname               String?
  timezone               String?
  totalMemory            BigInt?
  freeMemory             BigInt?
  createdAt              DateTime @default(now())

  device Device @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([deviceId])
}

model EmailVerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  newEmail  String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model File {
  id                  String    @id @default(uuid())
  workspaceId         String
  name                String
  extension           String
  mimeType            String
  previewPath         String?
  size                BigInt
  type                String
  path                String    @unique
  width               Int?
  height              Int?
  duration            Int?
  // TODO: Implement defaultDuration
  defaultDuration     Int?
  md5                 String?
  folderId            String?
  availabilityStartAt DateTime?
  availabilityEndAt   DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  deletedAt           DateTime?
  uploaderId          String?

  folder        Folder?        @relation(fields: [folderId], references: [id], onDelete: Cascade)
  workspace     Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  uploader      User?          @relation(fields: [uploaderId], references: [id], onDelete: SetNull)
  playlistItems PlaylistItem[]

  @@index([workspaceId])
  @@index([folderId])
  @@index([uploaderId])
  @@index([deletedAt])
  @@index([name])
}

model FileUploadSession {
  id          String    @id @default(uuid())
  name        String
  path        String
  size        BigInt
  uploaded    BigInt    @default(0)
  parts       Int       @default(0)
  mimeType    String    @default("application/octet-stream")
  workspaceId String
  uploadId    String
  folderId    String?
  userId      String
  createdAt   DateTime  @default(now())
  completedAt DateTime?

  folder    Folder?   @relation(fields: [folderId], references: [id], onDelete: SetNull)
  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Folder {
  id          String    @id @default(uuid())
  name        String
  workspaceId String
  parentId    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  workspace          Workspace           @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  parent             Folder?             @relation("FolderToFolder", fields: [parentId], references: [id], onDelete: Cascade)
  subfolders         Folder[]            @relation("FolderToFolder")
  files              File[]
  fileUploadSessions FileUploadSession[]

  @@index([parentId])
}

model Playlist {
  id               String    @id @default(uuid())
  workspaceId      String
  playlistLayoutId String?
  name             String
  description      String    @default("")
  size             BigInt    @default(0)
  type             String    @default("standard")
  isPublished      Boolean   @default(false)
  priority         Int       @default(0)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  deletedAt        DateTime?

  workspace Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  layout    PlaylistLayout? @relation(fields: [playlistLayoutId], references: [id], onDelete: SetNull)

  items       PlaylistItem[]
  parentItems PlaylistItem[]     @relation("PlaylistAsNestedPlaylist")
  screens     PlaylistScreen[]
  schedules   PlaylistSchedule[]
}

enum PlaylistItemType {
  File
  NestedPlaylist
}

model PlaylistItem {
  id                      String           @id @default(uuid())
  playlistId              String
  type                    PlaylistItemType
  duration                Int?
  playlistLayoutSectionId String
  fileId                  String?
  nestedPlaylistId        String?
  order                   Int
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt

  playlist              Playlist              @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  file                  File?                 @relation(fields: [fileId], references: [id], onDelete: Cascade)
  nestedPlaylist        Playlist?             @relation("PlaylistAsNestedPlaylist", fields: [nestedPlaylistId], references: [id], onDelete: Cascade)
  playlistLayoutSection PlaylistLayoutSection @relation(fields: [playlistLayoutSectionId], references: [id], onDelete: Cascade)

  @@index([playlistId])
  @@index([fileId])
}

model PlaylistLayout {
  id               String   @id @default(uuid())
  workspaceId      String
  name             String
  resolutionWidth  Int
  resolutionHeight Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  playlists Playlist[]
  sections  PlaylistLayoutSection[]

  @@index([name])
}

model PlaylistLayoutSection {
  id               String @id @default(uuid())
  playlistLayoutId String
  name             String
  top              Int
  left             Int
  width            Int
  height           Int
  zIndex           Int

  playlistLayout PlaylistLayout @relation(fields: [playlistLayoutId], references: [id], onDelete: Cascade)
  playlistItems  PlaylistItem[]
}

enum Weekday {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model PlaylistSchedule {
  id         String    @id @default(uuid())
  playlistId String
  startAt    DateTime
  endAt      DateTime?
  startTime  String?
  endTime    String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  weekdays Weekday[]
}

model PlaylistScreen {
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  playlistId String
  screen     Screen   @relation(fields: [screenId], references: [id], onDelete: Cascade)
  screenId   String

  @@id([playlistId, screenId])
}

enum LayoutRotation {
  R0
  R90
  R180
  R270
}

model Screen {
  id               String         @id @default(uuid())
  workspaceId      String
  groupId          String?
  name             String
  layoutRotation   LayoutRotation @default(R0)
  resolutionWidth  Int
  resolutionHeight Int
  type             String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  workspace Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  device    Device?
  playlists PlaylistScreen[]
  group     ScreenGroup?     @relation(fields: [groupId], references: [id], onDelete: SetNull)

  @@index([workspaceId])
  @@index([groupId])
}

model ScreenGroup {
  id          String    @id @default(uuid())
  name        String
  workspaceId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  screens   Screen[]

  @@index([workspaceId])
}

model Session {
  id             String    @id @default(uuid())
  userId         String
  token          String    @unique
  userAgent      String
  ipAddress      String
  createdAt      DateTime  @default(now())
  revokedAt      DateTime?
  lastActivityAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([revokedAt])
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  emailVerifiedAt DateTime?
  name            String
  password        String
  profilePhoto    String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  emailVerificationTokens EmailVerificationToken[]
  sessions                Session[]
  workspaces              UserWorkspace[]
  userPreferences         UserPreferences[]
  uploadedFiles           File[]
  fileUploadSessions      FileUploadSession[]
  sentInvitations         WorkspaceUserInvitation[]
}

model UserPreferences {
  id        String   @id @default(uuid())
  userId    String
  locale    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserWorkspace {
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String
  workspace             Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId           String
  workspaceInvitationId String?   @unique
  role                  String    @default("member")
  permissions           String[]  @default([])
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  workspaceInvitation WorkspaceUserInvitation? @relation(fields: [workspaceInvitationId], references: [id], onDelete: SetNull)

  @@id([userId, workspaceId])
}

model Workspace {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  status    String
  picture   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members            UserWorkspace[]
  screens            Screen[]
  playlists          Playlist[]
  layouts            PlaylistLayout[]
  files              File[]
  folders            Folder[]
  fileUploadSessions FileUploadSession[]
  userInvitations    WorkspaceUserInvitation[]
  screenGroups       ScreenGroup[]
}

model WorkspaceUserInvitation {
  id          String   @id @default(uuid())
  email       String
  status      String   @default("pending")
  workspaceId String
  invitorId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  invitor   User?     @relation(fields: [invitorId], references: [id], onDelete: SetNull)

  members UserWorkspace[]

  @@index([email])
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["strictUndefinedChecks", "driverAdapters"]
  output          = "../generated/client"
}
